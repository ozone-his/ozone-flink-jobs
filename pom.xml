<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.ozonehis</groupId>
  <artifactId>flink-jobs</artifactId>
  <version>2.3.0</version>
  <packaging>jar</packaging>
  <name>Ozone ETL Pipelines</name>

  <organization>
    <name>Ozone HIS</name>
    <url>https://www.ozone-his.com</url>
  </organization>
  <developers>
    <developer>
      <name>Mekom Solutions</name>
      <url>https://www.mekomsolutions.com</url>
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <hadoop.version>2.8.5</hadoop.version>
    <junit.jupiter.version>5.10.1</junit.jupiter.version>
    <log4j.version>2.20.0</log4j.version>
    <flink.version>1.17.1</flink.version>
    <target.java.version>11</target.java.version>
    <scala.binary.version>2.12</scala.binary.version>
    <maven.compiler.source>${target.java.version}</maven.compiler.source>
    <maven.compiler.target>${target.java.version}</maven.compiler.target>
    <jackson.version>2.15.0-rc1</jackson.version>
    <scope>compile</scope>
    <spotless.version>2.30.0</spotless.version>
    <palantirJavaFormat.version>1.1.0</palantirJavaFormat.version>
    <mysql.connector.version>8.2.0</mysql.connector.version>
    <testcontainers.version>1.19.7</testcontainers.version>
    <analytics.queries.version>1.1.0</analytics.queries.version>
    <ozone.version>1.0.0-alpha.11</ozone.version>
    <spring.version>5.3.23</spring.version>
    <mockitoJunitVersion>5.7.0</mockitoJunitVersion>
    <powerMockVersion>2.0.9</powerMockVersion>
    <byteBuddyVersion>1.14.10</byteBuddyVersion>

    <!-- Plugins -->
    <surefire.version>3.2.5</surefire.version>
    <dependency.version>3.6.1</dependency.version>
  </properties>

  <dependencies>
    <!-- Apache Flink dependencies -->
    <!-- These dependencies are provided, because they should not be packaged into the JAR file. -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-streaming-java</artifactId>
      <version>${flink.version}</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-planner-loader</artifactId>
      <version>${flink.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table</artifactId>
      <version>${flink.version}</version>
      <type>pom</type>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-common</artifactId>
      <version>${flink.version}</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-runtime</artifactId>
      <version>${flink.version}</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-statebackend-rocksdb</artifactId>
      <version>${flink.version}</version>
      <scope>${scope}</scope>
    </dependency>
    <!-- Add connector dependencies here. They must be in the default scope (compile). -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-json</artifactId>
      <version>${flink.version}</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-connector-jdbc</artifactId>
      <version>3.1.1-1.17</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-connector-kafka</artifactId>
      <version>${flink.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-connector-files</artifactId>
      <version>${flink.version}</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-metrics-prometheus</artifactId>
      <version>${flink.version}</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-parquet</artifactId>
      <version>${flink.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-csv</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-runtime-web</artifactId>
      <version>${flink.version}</version>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.28</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>42.6.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <version>2.10.2</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-mapreduce-client-core</artifactId>
      <version>2.10.2</version>
      <scope>${scope}</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>1.7.5</version>
    </dependency>
    <!-- These dependencies are excluded from the application JAR by default. -->
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.5.0</version>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>${mysql.connector.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>mysql</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>ozone</artifactId>
      <version>${ozone.version}</version>
      <type>zip</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>analytics-queries</artifactId>
      <version>${analytics.queries.version}</version>
      <type>zip</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${spring.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockitoJunitVersion}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-core</artifactId>
      <version>${powerMockVersion}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>net.bytebuddy</groupId>
      <artifactId>byte-buddy</artifactId>
      <version>${byteBuddyVersion}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>mks-nexus-public-releases</id>
      <name>Mekom Solutions Nexus repo for releases</name>
      <url>https://nexus.mekomsolutions.net/repository/maven-releases</url>
    </repository>
    <repository>
      <id>mks-nexus-public-snapshots</id>
      <name>Mekom Solutions Nexus repo for snapshots</name>
      <url>https://nexus.mekomsolutions.net/repository/maven-snapshots</url>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>openmrs-repo</id>
      <name>OpenMRS Nexus</name>
      <url>https://mavenrepo.openmrs.org/public</url>
    </pluginRepository>
    <pluginRepository>
      <id>openmrs-repo-snapshots</id>
      <name>OpenMRS Nexus Snapshots</name>
      <url>https://mavenrepo.openmrs.org/snapshots</url>
    </pluginRepository>
  </pluginRepositories>
  <build>

    <pluginManagement>
      <plugins>
        <!-- This improves the out-of-the-box experience in Eclipse by resolving some
				warnings. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <versionRange>[3.1.1,)</versionRange>
                    <goals>
                      <goal>shade</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <versionRange>[3.1,)</versionRange>
                    <goals>
                      <goal>testCompile</goal>
                      <goal>compile</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
        <plugin>
          <groupId>net.revelc.code.formatter</groupId>
          <artifactId>formatter-maven-plugin</artifactId>
          <dependencies>
            <dependency>
              <groupId>org.openmrs.tools</groupId>
              <artifactId>openmrs-tools</artifactId>
              <version>2.2.0</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${dependency.version}</version>
          <executions>
            <execution>
              <id>unpack-dependencies</id>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <phase>generate-test-resources</phase>
              <configuration>
                <includeGroupIds>com.ozonehis</includeGroupIds>
                <includeArtifactIds>analytics-queries,ozone</includeArtifactIds>
                <includeTypes>zip</includeTypes>
                <includes>run/docker/docker-compose-common.yml,
                    run/docker/docker-compose-superset.yml,
                    run/docker/docker-compose-openmrs.yml,
                    run/docker/docker-compose-odoo.yml,
                    distro/configs/superset/**,
                    distro/data/**,
                    distro/configs/openmrs/properties/**,
                    distro/binaries/openmrs/frontend/**,
                    distro/configs/openmrs/frontend_config/**,
                    distro/configs/openmrs/initializer_config/**,
                    distro/configs/odoo/config/**,
                    dsl/**/*.sql,
                    liquibase/**/*.xml</includes>
                <outputDirectory>${project.build.directory}/test-classes</outputDirectory>
                <overWriteReleases>false</overWriteReleases>
                <overWriteSnapshots>true</overWriteSnapshots>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire.version}</version>
          <configuration>
            <argLine>--add-opens java.base/java.lang=ALL-UNNAMED
                --add-opens java.base/java.util=ALL-UNNAMED</argLine>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>${target.java.version}</source>
          <target>${target.java.version}</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>spotless</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <!-- Code formatting -->
          <plugin>
            <groupId>com.diffplug.spotless</groupId>
            <artifactId>spotless-maven-plugin</artifactId>
            <version>${spotless.version}</version>
            <configuration>
              <formats>
                <format>
                  <includes>
                    <include>.gitignore</include>
                  </includes>
                  <trimTrailingWhitespace/>
                  <endWithNewline/>
                  <indent>
                    <tabs>true</tabs>
                    <spacesPerTab>4</spacesPerTab>
                  </indent>
                </format>
              </formats>
              <java>
                <palantirJavaFormat>
                  <version>${palantirJavaFormat.version}</version>
                </palantirJavaFormat>
                <removeUnusedImports/>
                <formatAnnotations/>
              </java>
              <pom>
                <includes>
                  <include>pom.xml</include>
                  <include>**/pom.xml</include>
                </includes>
                <sortPom>
                  <encoding>UTF-8</encoding>
                  <expandEmptyElements>false</expandEmptyElements>
                  <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>
                  <sortProperties>false</sortProperties>
                </sortPom>
              </pom>
              <markdown>
                <includes>
                  <include>**/*.md</include>
                  <include>*.md</include>
                </includes>
                <flexmark/>
              </markdown>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>com.diffplug.spotless</groupId>
                <artifactId>spotless-maven-plugin</artifactId>
                <version>${spotless.version}</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <id>format</id>
                <goals>
                  <goal>apply</goal>
                  <goal>check</goal>
                </goals>
                <phase>install</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>streaming</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <scope>compile</scope>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>3.1.1</version>
            <executions>
              <!-- Run shade goal on package phase -->
              <execution>
                <id>streaming-job-build</id>
                <goals>
                  <goal>shade</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <artifactSet>
                    <excludes>
                      <!-- <exclude>org.apache.flink:force-shading</exclude>
											<exclude>com.google.code.findbugs:jsr305</exclude>
											<exclude>org.slf4j:*</exclude>
											<exclude>org.apache.logging.log4j:*</exclude> -->
                    </excludes>
                  </artifactSet>
                  <filters>
                    <filter>
                      <!-- Do not copy the signatures in the META-INF folder.
                                            Otherwise, this might cause SecurityExceptions when using the JAR. -->
                      <artifact>*:*</artifact>
                      <excludes>
                        <exclude>META-INF/*.SF</exclude>
                        <exclude>META-INF/*.DSA</exclude>
                        <exclude>META-INF/*.RSA</exclude>
                      </excludes>
                    </filter>
                  </filters>
                  <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                      <mainClass>com.ozonehis.data.pipelines.streaming.StreamingETLJob</mainClass>
                    </transformer>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                      <resource>META-INF/services/java.sql.Driver</resource>
                    </transformer>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                      <resource>META-INF/services/java.sql.Driver</resource>
                    </transformer>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                  </transformers>
                  <finalName>${project.artifactId}-${project.version}-etl-streaming</finalName>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>batch</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <scope>compile</scope>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>3.1.1</version>
            <executions>
              <execution>
                <id>export-job-build</id>
                <goals>
                  <goal>shade</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <artifactSet>
                    <excludes>
                      <!--<exclude>org.apache.flink:force-shading</exclude>-->
                      <!--<exclude>com.google.code.findbugs:jsr305</exclude>-->
                      <!--<exclude>org.slf4j:*</exclude>-->
                      <!--<exclude>org.apache.logging.log4j:*</exclude>-->
                    </excludes>
                  </artifactSet>
                  <filters>
                    <filter>
                      <!-- Do not copy the signatures in the META-INF folder.
                                            Otherwise, this might cause SecurityExceptions when using the JAR. -->
                      <artifact>*:*</artifact>
                      <excludes>
                        <exclude>META-INF/*.SF</exclude>
                        <exclude>META-INF/*.DSA</exclude>
                        <exclude>META-INF/*.RSA</exclude>
                      </excludes>
                    </filter>
                  </filters>
                  <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                      <mainClass>com.ozonehis.data.pipelines.export.BatchExport</mainClass>
                    </transformer>
                  </transformers>
                  <finalName>${project.artifactId}-${project.version}-etl-export</finalName>
                </configuration>
              </execution>
              <execution>
                <id>batch-etl-build</id>
                <goals>
                  <goal>shade</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <artifactSet>
                    <excludes>
                      <!--<exclude>org.apache.flink:force-shading</exclude>-->
                      <!--<exclude>com.google.code.findbugs:jsr305</exclude>-->
                      <!--<exclude>org.slf4j:*</exclude>-->
                      <!--<exclude>org.apache.logging.log4j:*</exclude>-->
                    </excludes>
                  </artifactSet>
                  <filters>
                    <filter>
                      <!-- Do not copy the signatures in the META-INF folder.
                                            Otherwise, this might cause SecurityExceptions when using the JAR. -->
                      <artifact>*:*</artifact>
                      <excludes>
                        <exclude>META-INF/*.SF</exclude>
                        <exclude>META-INF/*.DSA</exclude>
                        <exclude>META-INF/*.RSA</exclude>
                      </excludes>
                    </filter>
                  </filters>
                  <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                      <mainClass>com.ozonehis.data.pipelines.batch.BatchETLJob</mainClass>
                    </transformer>
                  </transformers>
                  <finalName>${project.artifactId}-${project.version}-etl-batch</finalName>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
